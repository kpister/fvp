// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitor.proto

package monitor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	fvp "github.com/kpister/fvp/server/proto/fvp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReturnCode int32

const (
	ReturnCode_SUCCESS ReturnCode = 0
	ReturnCode_FAILURE ReturnCode = 1
)

var ReturnCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var ReturnCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x ReturnCode) String() string {
	return proto.EnumName(ReturnCode_name, int32(x))
}

func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0}
}

type MonitorSendMsg struct {
	From                 string       `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   []string     `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	Msg                  *fvp.SendMsg `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MonitorSendMsg) Reset()         { *m = MonitorSendMsg{} }
func (m *MonitorSendMsg) String() string { return proto.CompactTextString(m) }
func (*MonitorSendMsg) ProtoMessage()    {}
func (*MonitorSendMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0}
}

func (m *MonitorSendMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorSendMsg.Unmarshal(m, b)
}
func (m *MonitorSendMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorSendMsg.Marshal(b, m, deterministic)
}
func (m *MonitorSendMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorSendMsg.Merge(m, src)
}
func (m *MonitorSendMsg) XXX_Size() int {
	return xxx_messageInfo_MonitorSendMsg.Size(m)
}
func (m *MonitorSendMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorSendMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorSendMsg proto.InternalMessageInfo

func (m *MonitorSendMsg) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MonitorSendMsg) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MonitorSendMsg) GetMsg() *fvp.SendMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{1}
}

func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

type ServerState struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerState) Reset()         { *m = ServerState{} }
func (m *ServerState) String() string { return proto.CompactTextString(m) }
func (*ServerState) ProtoMessage()    {}
func (*ServerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{2}
}

func (m *ServerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerState.Unmarshal(m, b)
}
func (m *ServerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerState.Marshal(b, m, deterministic)
}
func (m *ServerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerState.Merge(m, src)
}
func (m *ServerState) XXX_Size() int {
	return xxx_messageInfo_ServerState.Size(m)
}
func (m *ServerState) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerState.DiscardUnknown(m)
}

var xxx_messageInfo_ServerState proto.InternalMessageInfo

func (m *ServerState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("monitor.ReturnCode", ReturnCode_name, ReturnCode_value)
	proto.RegisterType((*MonitorSendMsg)(nil), "monitor.MonitorSendMsg")
	proto.RegisterType((*EmptyMessage)(nil), "monitor.EmptyMessage")
	proto.RegisterType((*ServerState)(nil), "monitor.ServerState")
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor_44174b7b2a306b71) }

var fileDescriptor_44174b7b2a306b71 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xdf, 0x4a, 0x84, 0x40,
	0x14, 0xc6, 0xfd, 0x13, 0xd9, 0x1e, 0x37, 0x59, 0x86, 0x22, 0x11, 0x0a, 0xf1, 0x22, 0xa4, 0x0b,
	0xa5, 0xed, 0xaa, 0xab, 0x08, 0xb1, 0x08, 0xf2, 0xc6, 0x69, 0x1f, 0x60, 0x37, 0x47, 0x93, 0xd0,
	0x91, 0x99, 0xb3, 0x42, 0x0f, 0xd0, 0x7b, 0x87, 0xa3, 0x2d, 0xbb, 0xb0, 0x77, 0x73, 0xfe, 0x7c,
	0xdf, 0xfc, 0xce, 0x07, 0xe7, 0x0d, 0x6f, 0x6b, 0xe4, 0x22, 0xea, 0x04, 0x47, 0x4e, 0xac, 0xa9,
	0xf4, 0xee, 0xab, 0x1a, 0xbf, 0xb6, 0x9b, 0xe8, 0x93, 0x37, 0xf1, 0x77, 0x57, 0x4b, 0x64, 0x22,
	0x2e, 0xfb, 0x2e, 0x96, 0x4c, 0xf4, 0x4c, 0xc4, 0x6a, 0x5b, 0x35, 0xca, 0xbe, 0x1b, 0xb5, 0xc1,
	0x07, 0x38, 0xd9, 0xa8, 0xa6, 0xac, 0x2d, 0x32, 0x59, 0x11, 0x02, 0x27, 0xa5, 0xe0, 0x8d, 0xab,
	0xfb, 0x7a, 0x38, 0xcb, 0xd5, 0x9b, 0x38, 0x60, 0x20, 0x77, 0x0d, 0xdf, 0x0c, 0x67, 0xb9, 0x81,
	0x9c, 0xdc, 0x80, 0xd9, 0xc8, 0xca, 0x35, 0x7d, 0x3d, 0xb4, 0x97, 0xf3, 0x68, 0xb0, 0x9b, 0xe4,
	0xf9, 0x30, 0x08, 0x1c, 0x98, 0xa7, 0x4d, 0x87, 0x3f, 0x19, 0x93, 0x72, 0x5d, 0xb1, 0xe0, 0x1a,
	0x6c, 0xaa, 0x18, 0x28, 0xae, 0x91, 0x0d, 0x76, 0x75, 0x31, 0x7d, 0x60, 0xd4, 0xc5, 0xdd, 0x2d,
	0x40, 0xce, 0x70, 0x2b, 0xda, 0x84, 0x17, 0x8c, 0xd8, 0x60, 0xd1, 0x55, 0x92, 0xa4, 0x94, 0x2e,
	0xb4, 0xa1, 0x78, 0x79, 0x7e, 0x7b, 0x5f, 0xe5, 0xe9, 0x42, 0x5f, 0xfe, 0xea, 0x60, 0x4d, 0xb4,
	0xe4, 0x09, 0xec, 0x3d, 0x70, 0x72, 0x15, 0xfd, 0x67, 0x72, 0x78, 0x8e, 0x77, 0xb9, 0x1b, 0x1c,
	0x10, 0x69, 0xe4, 0x11, 0xce, 0x5e, 0x19, 0x8e, 0x40, 0xc7, 0x97, 0xbc, 0x8b, 0x5d, 0x7b, 0x8f,
	0x3e, 0xd0, 0x36, 0xa7, 0x2a, 0xbb, 0x87, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xba, 0x72,
	0x4d, 0x88, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorClient interface {
	MonitorSend(ctx context.Context, in *MonitorSendMsg, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetState(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServerState, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) MonitorSend(ctx context.Context, in *MonitorSendMsg, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/monitor.Monitor/MonitorSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetState(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServerState, error) {
	out := new(ServerState)
	err := c.cc.Invoke(ctx, "/monitor.Monitor/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
type MonitorServer interface {
	MonitorSend(context.Context, *MonitorSendMsg) (*EmptyMessage, error)
	GetState(context.Context, *EmptyMessage) (*ServerState, error)
}

// UnimplementedMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) MonitorSend(ctx context.Context, req *MonitorSendMsg) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorSend not implemented")
}
func (*UnimplementedMonitorServer) GetState(ctx context.Context, req *EmptyMessage) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}

// UnimplementedMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) UploadConnMap(ctx context.Context, req *ConnMap) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadConnMap not implemented")
}
func (*UnimplementedMonitorServer) GetState(ctx context.Context, req *EmptyMessage) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedMonitorServer) SetEvil(ctx context.Context, req *BoolMessage) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEvil not implemented")
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_MonitorSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorSendMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).MonitorSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Monitor/MonitorSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).MonitorSend(ctx, req.(*MonitorSendMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Monitor/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetState(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MonitorSend",
			Handler:    _Monitor_MonitorSend_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Monitor_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitor.proto",
}
